import com.android.build.gradle.AppPlugin
import proguard.gradle.ProGuardTask

apply plugin: 'com.android.library'
/*apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'*/
android {
    compileSdkVersion 26



    defaultConfig {
        /*applicationId "com.voole.utils"*/
        minSdkVersion 14
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    lintOptions {
        abortOnError false
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
//    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    testImplementation 'junit:junit:4.12'
    /**
     *  OKHttp依赖
     */
    compile 'com.squareup.okhttp3:okhttp:3.8.1'
    /**
     *  fastjson依赖
     */
    compile 'com.alibaba:fastjson:1.2.37'
    /**
     *  retrofit网络库
     */
    compile 'com.squareup.retrofit2:retrofit:2.1.0'
    /**
     *  对象转换
     */
    compile 'com.squareup.retrofit2:converter-gson:2.1.0'
    compile 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'
    /**
     * RxJava
     */
    compile 'io.reactivex.rxjava2:rxandroid:2.0.1'
    compile 'io.reactivex.rxjava2:rxjava:2.0.6'
    /**
     * glide 图片加载框架
     */
    compile 'com.github.bumptech.glide:glide:3.7.0'
    // Glide图形转换工具
    compile 'jp.wasabeef:glide-transformations:2.0.1'

    // GPUImage
    compile 'jp.co.cyberagent.android.gpuimage:gpuimage-library:1.3.0'
    /**
     *  ButterKnife 注解框架
     */
    compile 'com.jakewharton:butterknife:8.5.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.5.1'
}

task buildJar(dependsOn: ['compileReleaseJavaWithJavac'], type: Jar) {
    archiveName 'vooleordersdk.jar'
    from('build/intermediates/classes/release/')
    //from('../../CommonLib3.0/UtilsLib/build/intermediates/classes/release/')
    //from('../../CommonLib3.0/ProxyAuthLib/build/intermediates/classes/release/')

    exclude "**/R.class"
    exclude "**/R\$*.class"

    //只导入资源路径集下的部分资源
    //include "com/**"
    //exclude('BuildConfig.class', 'R.class')
    //去掉R$开头的文件
    //exclude{ it.name.startsWith('R$')}
}

task proguardJar(dependsOn: ['buildJar'], type: ProGuardTask) {
    //Android 默认的 proguard 文件
    //configuration android.getDefaultProguardFile('proguard-android.txt')
    //会根据该文件对 Jar 进行混淆，注意：需要在 manifest 注册的组件也要加入该文件中
    configuration 'proguard-rules.pro'

    String inJar = buildJar.archivePath.getAbsolutePath()
    //输入 jar
    injars inJar
    //输出 jar
    outjars inJar.substring(0, inJar.lastIndexOf(File.separator)) + "/P${buildJar.archiveName}"

    //设置不删除未引用的资源(类，方法等)
    dontshrink

    AppPlugin appPlugin = getPlugins().findPlugin(AppPlugin)
    if (appPlugin != null) {
        List<String> runtimeJarList
        if (appPlugin.getMetaClass().getMetaMethod("getRuntimeJarList")) {
            runtimeJarList = appPlugin.getRuntimeJarList()
        } else if (android.getMetaClass().getMetaMethod("getBootClasspath")) {
            runtimeJarList = android.getBootClasspath()
        } else {
            runtimeJarList = appPlugin.getBootClasspath()
        }

        for (String runtimeJar : runtimeJarList) {
            //给 proguard 添加 runtime
            libraryjars(runtimeJar)
        }
    }
}