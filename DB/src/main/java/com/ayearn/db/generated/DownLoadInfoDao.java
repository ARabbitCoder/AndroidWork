package com.ayearn.db.generated;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ayearn.db.bean.DownLoadInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "downloadinfo".
*/
public class DownLoadInfoDao extends AbstractDao<DownLoadInfo, Long> {

    public static final String TABLENAME = "downloadinfo";

    /**
     * Properties of entity DownLoadInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Downloadurl = new Property(1, String.class, "downloadurl", false, "DOWNLOADURL");
        public final static Property Downloadid = new Property(2, String.class, "downloadid", false, "DOWNLOADID");
        public final static Property Downloadname = new Property(3, String.class, "downloadname", false, "DOWNLOADNAME");
        public final static Property Downloadstatus = new Property(4, int.class, "downloadstatus", false, "DOWNLOADSTATUS");
        public final static Property Downloadpercent = new Property(5, String.class, "downloadpercent", false, "DOWNLOADPERCENT");
        public final static Property Isdownloadcomplete = new Property(6, boolean.class, "isdownloadcomplete", false, "ISDOWNLOADCOMPLETE");
        public final static Property Filemd5 = new Property(7, String.class, "filemd5", false, "FILEMD5");
        public final static Property Savefilepath = new Property(8, String.class, "savefilepath", false, "SAVEFILEPATH");
    };


    public DownLoadInfoDao(DaoConfig config) {
        super(config);
    }
    
    public DownLoadInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"downloadinfo\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"DOWNLOADURL\" TEXT NOT NULL ," + // 1: downloadurl
                "\"DOWNLOADID\" TEXT NOT NULL ," + // 2: downloadid
                "\"DOWNLOADNAME\" TEXT NOT NULL ," + // 3: downloadname
                "\"DOWNLOADSTATUS\" INTEGER NOT NULL ," + // 4: downloadstatus
                "\"DOWNLOADPERCENT\" TEXT NOT NULL ," + // 5: downloadpercent
                "\"ISDOWNLOADCOMPLETE\" INTEGER NOT NULL ," + // 6: isdownloadcomplete
                "\"FILEMD5\" TEXT NOT NULL ," + // 7: filemd5
                "\"SAVEFILEPATH\" TEXT NOT NULL );"); // 8: savefilepath
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"downloadinfo\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DownLoadInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindString(2, entity.getDownloadurl());
        stmt.bindString(3, entity.getDownloadid());
        stmt.bindString(4, entity.getDownloadname());
        stmt.bindLong(5, entity.getDownloadstatus());
        stmt.bindString(6, entity.getDownloadpercent());
        stmt.bindLong(7, entity.getIsdownloadcomplete() ? 1L: 0L);
        stmt.bindString(8, entity.getFilemd5());
        stmt.bindString(9, entity.getSavefilepath());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DownLoadInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindString(2, entity.getDownloadurl());
        stmt.bindString(3, entity.getDownloadid());
        stmt.bindString(4, entity.getDownloadname());
        stmt.bindLong(5, entity.getDownloadstatus());
        stmt.bindString(6, entity.getDownloadpercent());
        stmt.bindLong(7, entity.getIsdownloadcomplete() ? 1L: 0L);
        stmt.bindString(8, entity.getFilemd5());
        stmt.bindString(9, entity.getSavefilepath());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public DownLoadInfo readEntity(Cursor cursor, int offset) {
        DownLoadInfo entity = new DownLoadInfo( //
            cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // downloadurl
            cursor.getString(offset + 2), // downloadid
            cursor.getString(offset + 3), // downloadname
            cursor.getInt(offset + 4), // downloadstatus
            cursor.getString(offset + 5), // downloadpercent
            cursor.getShort(offset + 6) != 0, // isdownloadcomplete
            cursor.getString(offset + 7), // filemd5
            cursor.getString(offset + 8) // savefilepath
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DownLoadInfo entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setDownloadurl(cursor.getString(offset + 1));
        entity.setDownloadid(cursor.getString(offset + 2));
        entity.setDownloadname(cursor.getString(offset + 3));
        entity.setDownloadstatus(cursor.getInt(offset + 4));
        entity.setDownloadpercent(cursor.getString(offset + 5));
        entity.setIsdownloadcomplete(cursor.getShort(offset + 6) != 0);
        entity.setFilemd5(cursor.getString(offset + 7));
        entity.setSavefilepath(cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DownLoadInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DownLoadInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
